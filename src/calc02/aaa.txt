- [ ]  사칙연산을 수행 후, 결과값 반환 메서드 구현 & 연산 결과를
저장하는 컬렉션 타입 필드를 가진 Calculator 클래스를 생성
    - [ ]  사칙연산을 수행한 후, 결과값을 반환하는 메서드 구현
    - [ ]  연산 결과를 저장하는 컬렉션 타입 필드를 가진
    Calculator 클래스를 생성
    - [ ]  1) 양의 정수 2개(0 포함)와 연산 기호를 매개변수로 받아
    사칙연산(➕,➖,✖️,➗) 기능을 수행한 후 2) 결과 값을 반환하는
     메서드와 연산 결과를 저장하는 컬렉션 타입 필드를 가진
     Calculator 클래스를 생성합니다.




    - 예시 코드

        ```java
        public class Calculator {
            /* 연산 결과를 저장하는 컬렉션 타입 필드 선언 및 생성 */

            public 반환타입 calculate(...매개변수) {
                /* 위 요구사항에 맞게 구현 */
                /* return 연산 결과 */
            }
        }
        ```


-> Caculator 클래스를 따로 생성 후 변수, 생성자, 메서드를 요구사항에 맞게 만들어야 함.
-> 컬렉션 타입 필드
-> result(결과)를 컬렉션 타입으로 받아와야할 것 같음
-> 1)에 의거하여,  클래스의 매개 변수는 num1, num2, operator로 이루어져야함.
-> 이후, 사칙연산을 수행하는 메서드를 구현하고
-> 2) 결과 값을 반환하는 메서드(결과값-> result)를 구현
-> 결과값을 반환하는 메서드를 구현하라
-> 2) 내용이 잘 이해가 가지 않는데,
-> 클래스 내부에 새롭게 연산 결과를 저장하는 컬렉션 타입 필드를 가진
-> 클래스를 생성해야하는 것 같다



- [ ]  **Lv 1에서 구현한 App 클래스의 main 메서드에
       Calculator 클래스가 활용될 수 있도록 수정**
    - [ ]  연산 수행 역할은 Calculator 클래스가 담당
        - [ ]  연산 결과는 Calculator 클래스의 연산 결과를
        저장하는 필드에 저장
    - [ ]  소스 코드 수정 후에도 수정 전의 기능들이 반드시 똑같이 동작해야합니다.
    - 예시 코드

        ```java
        public class App {
            public static void main(String[] args) {
                /* Calculator 인스턴스 생성 */

                Scanner sc = new Scanner(System.in);

                /* 반복문 시작 */
                    System.out.print("첫 번째 숫자를 입력하세요:");
                    int num1 = sc.nextInt();
                    System.out.print("두 번째 숫자를 입력하세요:");
                    int num2 = sc.nextInt();

                    System.out.print("사칙연산 기호를 입력하세요: ");
                    char operator = sc.next().charAt(0);

                    /* 위 요구사항에 맞게 소스 코드 수정 */

                    System.out.println("더 계산하시겠습니까? (exit 입력 시 종료)");
                    ...
                /* 반복문 종료 */
            }
        }
        ```

-> App 클래스에 있는 main에서 실행하는 식으로 진행되는 것 같음
-> 내부에 main 메서드를 생성한 App 클래스 생성
-> 연산 수행 역할은 Calculator 클래스가 담당하기 때문에 연산 관련 메서드는
-> Caculator에 있어야 함 // 완료
-> level1에서 연산기호를 tool로 했었는데 보여준 예시에 맞게 수정
-> 추가로 charAt을 사용하는 방식으로 수정한다.
-> 해당 방식에서 연산자에 대한 자료형을 char로 해야겠다고 생각이 들었음




- [ ]  **App 클래스의 main 메서드에서
Calculator 클래스의 연산 결과를 저장하고 있는 컬렉션 필드에
직접 접근하지 못하도록 수정 (캡슐화)**
    - [ ]  간접 접근을 통해 필드에 접근하여
    **가져올** 수 있도록 구현합니다. (Getter 메서드)
    - [ ]  간접 접근을 통해 필드에 접근하여
    **수정할** 수 있도록 구현합니다. (Setter 메서드)
    - [ ]  위 요구사항을 모두 구현 했다면
    App 클래스의 main 메서드에서 위에서 구현한 메서드를 활용 해봅니다.


    - 예시 코드

        ```java
        public class Calculator {
        		/* 연산 결과를 저장하는 컬렉션 타입 필드를 외부에서 직접 접근 하지 못하도록 수정*/

            public 반환타입 calculate(...매개변수) {
                ...
            }

            /* Getter 메서드 구현 */
            /* Setter 메서드 구현 */
        }

        public class App {
            public static void main(String[] args) {
                /* Calculator 인스턴스 생성 */

                Scanner sc = new Scanner(System.in);

                /* 반복문 시작 */
                    System.out.print("첫 번째 숫자를 입력하세요:");
                    int num1 = sc.nextInt();
                    System.out.print("두 번째 숫자를 입력하세요:");
                    int num2 = sc.nextInt();

                    System.out.print("사칙연산 기호를 입력하세요: ");
                    char operator = sc.next().charAt(0);

                    /* 위 요구사항에 맞게 소스 코드 수정 */

                    System.out.println("더 계산하시겠습니까? (exit 입력 시 종료)");
                    ...
                /* 반복문 종료 */
            }
        }
        ```



-> 이번 과제에서 캡슐화를 하는 부분 중 제일 중요한 부분은 외부에서 결과값을 임의로
-> 설정하지 못하게 하는 것이라고 생각함.
-> 따라서,


- [ ]  Calculator 클래스에 저장된 연산 결과들 중
가장 먼저 저장된 데이터를 삭제하는 기능을 가진 메서드를 구현한 후
App 클래스의 main 메서드에 삭제 메서드가 활용될 수 있도록 수정
    - [ ]  키워드 : `컬렉션`
        - [ ]  컬렉션에서 ‘값을 넣고 제거하는 방법을 이해한다.’가 중요합니다!

        public void removeResult() {
                /* 구현 */
            }

해당 메서드를 구현하면 되는듯함